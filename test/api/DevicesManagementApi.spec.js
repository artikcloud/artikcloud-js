/**
 * ARTIK Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ArtikCloud);
  }
}(this, function(expect, ArtikCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ArtikCloud.DevicesManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DevicesManagementApi', function() {
    describe('createTasks', function() {
      it('should call createTasks successfully', function(done) {
        //uncomment below and update the code to test createTasks
        //instance.createTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServerProperties', function() {
      it('should call deleteServerProperties successfully', function(done) {
        //uncomment below and update the code to test deleteServerProperties
        //instance.deleteServerProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllByDid', function() {
      it('should call getAllByDid successfully', function(done) {
        //uncomment below and update the code to test getAllByDid
        //instance.getAllByDid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeviceTypesInfo', function() {
      it('should call getDeviceTypesInfo successfully', function(done) {
        //uncomment below and update the code to test getDeviceTypesInfo
        //instance.getDeviceTypesInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getManifestProperties', function() {
      it('should call getManifestProperties successfully', function(done) {
        //uncomment below and update the code to test getManifestProperties
        //instance.getManifestProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProperties', function() {
      it('should call getProperties successfully', function(done) {
        //uncomment below and update the code to test getProperties
        //instance.getProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatuses', function() {
      it('should call getStatuses successfully', function(done) {
        //uncomment below and update the code to test getStatuses
        //instance.getStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatusesHistory', function() {
      it('should call getStatusesHistory successfully', function(done) {
        //uncomment below and update the code to test getStatusesHistory
        //instance.getStatusesHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskByID', function() {
      it('should call getTaskByID successfully', function(done) {
        //uncomment below and update the code to test getTaskByID
        //instance.getTaskByID(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasks', function() {
      it('should call getTasks successfully', function(done) {
        //uncomment below and update the code to test getTasks
        //instance.getTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryProperties', function() {
      it('should call queryProperties successfully', function(done) {
        //uncomment below and update the code to test queryProperties
        //instance.queryProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeviceTypesInfo', function() {
      it('should call updateDeviceTypesInfo successfully', function(done) {
        //uncomment below and update the code to test updateDeviceTypesInfo
        //instance.updateDeviceTypesInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServerProperties', function() {
      it('should call updateServerProperties successfully', function(done) {
        //uncomment below and update the code to test updateServerProperties
        //instance.updateServerProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTask', function() {
      it('should call updateTask successfully', function(done) {
        //uncomment below and update the code to test updateTask
        //instance.updateTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskForDevice', function() {
      it('should call updateTaskForDevice successfully', function(done) {
        //uncomment below and update the code to test updateTaskForDevice
        //instance.updateTaskForDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
